{"version":3,"sources":["ProductList.js","App.js","reportWebVitals.js","index.js"],"names":["ProductList","productList","loading","useState","show","setShow","id","style","position","right","zIndex","Toast","onClose","delay","autohide","Header","src","className","alt","Body","map","p","paddingBottom","paddingRight","Card","fontWeight","gender","float","primaryColour","Img","variant","searchImage","product","Title","brand","Text","price","Button","onClick","productId","Spinner","animation","App","setProductList","setLoading","useEffect","fetchProduct","a","axios","get","data","status","concat","products","window","onscroll","innerHeight","document","documentElement","scrollTop","offsetHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gPAqEeA,EAlEK,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QAAc,EACxBC,oBAAS,GADe,mBACzCC,EADyC,KACnCC,EADmC,KAGhD,OACE,sBAAKC,GAAG,gBAAR,UACE,qBAAKC,MAAO,CAAEC,SAAU,QAASC,MAAO,MAAOC,OAAQ,OAAvD,SACE,eAACC,EAAA,EAAD,CAAOC,QAAS,kBAAMP,GAAQ,IAAQD,KAAMA,EAAMS,MAAO,IAAMC,UAAQ,EAAvE,UACE,eAACH,EAAA,EAAMI,OAAP,WACE,qBACEC,IAAI,2BACJC,UAAU,eACVC,IAAI,KAEN,wBAAQD,UAAU,UAAlB,0BAEF,cAACN,EAAA,EAAMQ,KAAP,+EAKJ,qBAAKF,UAAU,eAAf,SACGhB,GACCA,EAAYmB,KAAI,SAACC,GACf,OACE,qBACEd,MAAO,CACLe,cAAe,OACfC,aAAc,QAHlB,SAOE,eAACC,EAAA,EAAD,CAAMP,UAAU,WAAhB,UACE,gCACE,sBAAMV,MAAO,CAAEkB,WAAY,OAA3B,oBADF,IACqD,IAClDJ,EAAEK,OACH,uBAAMnB,MAAO,CAAEoB,MAAO,SAAtB,UACE,sBAAMpB,MAAO,CAAEkB,WAAY,OAA3B,mBADF,IACoD,IACjDJ,EAAEO,oBAGP,cAACJ,EAAA,EAAKK,IAAN,CAAUC,QAAQ,MAAMd,IAAKK,EAAEU,YAAab,IAAKG,EAAEW,UACnD,eAACR,EAAA,EAAKL,KAAN,WACE,cAACK,EAAA,EAAKS,MAAN,UAAaZ,EAAEa,QACf,cAACV,EAAA,EAAKW,KAAN,UAAYd,EAAEW,UACd,eAACR,EAAA,EAAKW,KAAN,qBAAmBd,EAAEe,SACrB,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMjC,GAAQ,IAAOyB,QAAQ,UAA9C,gCAhBCT,EAAEkB,gBAyBfrC,EAMA,6BALA,sBAAKe,UAAU,kBAAf,oCAEE,cAACuB,EAAA,EAAD,CAASC,UAAU,kB,iBCddC,G,MAzCH,WAAO,IAAD,EACsBvC,mBAAS,IAD/B,mBACTF,EADS,KACI0C,EADJ,OAEcxC,oBAAS,GAFvB,mBAETD,EAFS,KAEA0C,EAFA,KAIhBC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAY,uCAAG,8BAAAC,EAAA,6DACnBH,GAAW,GADQ,SAEUI,IAAMC,IAAN,gEAFV,gBAEbC,EAFa,EAEbA,KAGS,MALI,EAEPC,QAIVP,GAAW,GACXD,EAAe1C,EAAYmD,OAAOF,EAAKG,YAEvCV,EAAe,IATE,2CAAH,qDAuBlB,OATAW,OAAOC,SAAW,WAEdD,OAAOE,YAAcC,SAASC,gBAAgBC,YAC9CF,SAASC,gBAAgBE,cAEzBd,KAKF,gCACE,qBAAK7B,UAAU,eAAf,gCACA,8BACE,cAAC,EAAD,CAAahB,YAAaA,EAAaC,QAASA,WC5BzC2D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASgB,eAAe,SAM1BZ,M","file":"static/js/main.783f80c8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Card, Toast, Button, Spinner } from 'react-bootstrap';\n\nconst ProductList = ({ productList, loading }) => {\n  const [show, setShow] = useState(false);\n\n  return (\n    <div id='infinite-list'>\n      <div style={{ position: 'fixed', right: '0px', zIndex: '999' }}>\n        <Toast onClose={() => setShow(false)} show={show} delay={3000} autohide>\n          <Toast.Header>\n            <img\n              src='holder.js/20x20?text=%20'\n              className='rounded me-2'\n              alt=''\n            />\n            <strong className='me-auto'>Success!!</strong>\n          </Toast.Header>\n          <Toast.Body>\n            Woohoo, you're have added successfully this product to cart\n          </Toast.Body>\n        </Toast>\n      </div>\n      <div className='card-wrapper'>\n        {productList &&\n          productList.map((p) => {\n            return (\n              <div\n                style={{\n                  paddingBottom: '10px',\n                  paddingRight: '10px',\n                }}\n                key={p.productId}\n              >\n                <Card className='card-div'>\n                  <div>\n                    <span style={{ fontWeight: '600' }}>Gender</span>:{' '}\n                    {p.gender}\n                    <span style={{ float: 'right' }}>\n                      <span style={{ fontWeight: '600' }}>Color</span>:{' '}\n                      {p.primaryColour}\n                    </span>\n                  </div>\n                  <Card.Img variant='top' src={p.searchImage} alt={p.product} />\n                  <Card.Body>\n                    <Card.Title>{p.brand}</Card.Title>\n                    <Card.Text>{p.product}</Card.Text>\n                    <Card.Text>Cost : {p.price}</Card.Text>\n                    <Button onClick={() => setShow(true)} variant='primary'>\n                      Add To Cart\n                    </Button>\n                  </Card.Body>\n                </Card>\n              </div>\n            );\n          })}\n      </div>\n      {!loading ? (\n        <div className='spinner-wrapper'>\n          Loading product list...\n          <Spinner animation='border' />\n        </div>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n\nexport default ProductList;\n","import React, { useState, useEffect } from 'react';\nimport ProductList from './ProductList';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst App = () => {\n  const [productList, setProductList] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    fetchProduct();\n  }, []);\n\n  const fetchProduct = async () => {\n    setLoading(true);\n    let { data, status } = await axios.get(\n      `https://run.mocky.io/v3/05e9651d-528e-4d7c-a60b-bae8f09684c6`\n    );\n    if (status === 200) {\n      setLoading(false);\n      setProductList(productList.concat(data.products));\n    } else {\n      setProductList([]);\n    }\n  };\n\n  // call the api when the scroll end the page end\n  window.onscroll = function () {\n    if (\n      window.innerHeight + document.documentElement.scrollTop ===\n      document.documentElement.offsetHeight\n    ) {\n      fetchProduct();\n    }\n  };\n\n  return (\n    <div>\n      <div className='center-title'>Welcome To Product</div>\n      <div>\n        <ProductList productList={productList} loading={loading} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}